// Automatically generated by MockGen. DO NOT EDIT!
// Source: output.go

package mock_output

import (
	gomock "github.com/golang/mock/gomock"
)

// Mock of Output interface
type MockOutput struct {
	ctrl     *gomock.Controller
	recorder *_MockOutputRecorder
}

// Recorder for MockOutput (not exported)
type _MockOutputRecorder struct {
	mock *MockOutput
}

func NewMockOutput(ctrl *gomock.Controller) *MockOutput {
	mock := &MockOutput{ctrl: ctrl}
	mock.recorder = &_MockOutputRecorder{mock}
	return mock
}

func (_m *MockOutput) EXPECT() *_MockOutputRecorder {
	return _m.recorder
}

func (_m *MockOutput) Id() string {
	ret := _m.ctrl.Call(_m, "Id")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockOutputRecorder) Id() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Id")
}

func (_m *MockOutput) Active() (bool, error) {
	ret := _m.ctrl.Call(_m, "Active")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockOutputRecorder) Active() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Active")
}

func (_m *MockOutput) Activate() error {
	ret := _m.ctrl.Call(_m, "Activate")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockOutputRecorder) Activate() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Activate")
}

func (_m *MockOutput) Deactivate() error {
	ret := _m.ctrl.Call(_m, "Deactivate")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockOutputRecorder) Deactivate() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Deactivate")
}

func (_m *MockOutput) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockOutputRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}
