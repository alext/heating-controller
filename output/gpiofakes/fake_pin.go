// Code generated by counterfeiter. DO NOT EDIT.
package gpiofakes

import (
	sync "sync"

	gpio "github.com/alext/gpio"
)

type FakePin struct {
	BeginWatchStub        func(gpio.Edge, gpio.IRQEvent) error
	beginWatchMutex       sync.RWMutex
	beginWatchArgsForCall []struct {
		arg1 gpio.Edge
		arg2 gpio.IRQEvent
	}
	beginWatchReturns struct {
		result1 error
	}
	beginWatchReturnsOnCall map[int]struct {
		result1 error
	}
	ClearStub        func() error
	clearMutex       sync.RWMutex
	clearArgsForCall []struct {
	}
	clearReturns struct {
		result1 error
	}
	clearReturnsOnCall map[int]struct {
		result1 error
	}
	CloseStub        func() error
	closeMutex       sync.RWMutex
	closeArgsForCall []struct {
	}
	closeReturns struct {
		result1 error
	}
	closeReturnsOnCall map[int]struct {
		result1 error
	}
	EndWatchStub        func() error
	endWatchMutex       sync.RWMutex
	endWatchArgsForCall []struct {
	}
	endWatchReturns struct {
		result1 error
	}
	endWatchReturnsOnCall map[int]struct {
		result1 error
	}
	GetStub        func() (bool, error)
	getMutex       sync.RWMutex
	getArgsForCall []struct {
	}
	getReturns struct {
		result1 bool
		result2 error
	}
	getReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	ModeStub        func() (gpio.Mode, error)
	modeMutex       sync.RWMutex
	modeArgsForCall []struct {
	}
	modeReturns struct {
		result1 gpio.Mode
		result2 error
	}
	modeReturnsOnCall map[int]struct {
		result1 gpio.Mode
		result2 error
	}
	SetStub        func() error
	setMutex       sync.RWMutex
	setArgsForCall []struct {
	}
	setReturns struct {
		result1 error
	}
	setReturnsOnCall map[int]struct {
		result1 error
	}
	SetModeStub        func(gpio.Mode) error
	setModeMutex       sync.RWMutex
	setModeArgsForCall []struct {
		arg1 gpio.Mode
	}
	setModeReturns struct {
		result1 error
	}
	setModeReturnsOnCall map[int]struct {
		result1 error
	}
	WaitStub        func(bool)
	waitMutex       sync.RWMutex
	waitArgsForCall []struct {
		arg1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePin) BeginWatch(arg1 gpio.Edge, arg2 gpio.IRQEvent) error {
	fake.beginWatchMutex.Lock()
	ret, specificReturn := fake.beginWatchReturnsOnCall[len(fake.beginWatchArgsForCall)]
	fake.beginWatchArgsForCall = append(fake.beginWatchArgsForCall, struct {
		arg1 gpio.Edge
		arg2 gpio.IRQEvent
	}{arg1, arg2})
	fake.recordInvocation("BeginWatch", []interface{}{arg1, arg2})
	fake.beginWatchMutex.Unlock()
	if fake.BeginWatchStub != nil {
		return fake.BeginWatchStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.beginWatchReturns
	return fakeReturns.result1
}

func (fake *FakePin) BeginWatchCallCount() int {
	fake.beginWatchMutex.RLock()
	defer fake.beginWatchMutex.RUnlock()
	return len(fake.beginWatchArgsForCall)
}

func (fake *FakePin) BeginWatchArgsForCall(i int) (gpio.Edge, gpio.IRQEvent) {
	fake.beginWatchMutex.RLock()
	defer fake.beginWatchMutex.RUnlock()
	argsForCall := fake.beginWatchArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakePin) BeginWatchReturns(result1 error) {
	fake.BeginWatchStub = nil
	fake.beginWatchReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePin) BeginWatchReturnsOnCall(i int, result1 error) {
	fake.BeginWatchStub = nil
	if fake.beginWatchReturnsOnCall == nil {
		fake.beginWatchReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.beginWatchReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakePin) Clear() error {
	fake.clearMutex.Lock()
	ret, specificReturn := fake.clearReturnsOnCall[len(fake.clearArgsForCall)]
	fake.clearArgsForCall = append(fake.clearArgsForCall, struct {
	}{})
	fake.recordInvocation("Clear", []interface{}{})
	fake.clearMutex.Unlock()
	if fake.ClearStub != nil {
		return fake.ClearStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.clearReturns
	return fakeReturns.result1
}

func (fake *FakePin) ClearCallCount() int {
	fake.clearMutex.RLock()
	defer fake.clearMutex.RUnlock()
	return len(fake.clearArgsForCall)
}

func (fake *FakePin) ClearReturns(result1 error) {
	fake.ClearStub = nil
	fake.clearReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePin) ClearReturnsOnCall(i int, result1 error) {
	fake.ClearStub = nil
	if fake.clearReturnsOnCall == nil {
		fake.clearReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.clearReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakePin) Close() error {
	fake.closeMutex.Lock()
	ret, specificReturn := fake.closeReturnsOnCall[len(fake.closeArgsForCall)]
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct {
	}{})
	fake.recordInvocation("Close", []interface{}{})
	fake.closeMutex.Unlock()
	if fake.CloseStub != nil {
		return fake.CloseStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.closeReturns
	return fakeReturns.result1
}

func (fake *FakePin) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *FakePin) CloseReturns(result1 error) {
	fake.CloseStub = nil
	fake.closeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePin) CloseReturnsOnCall(i int, result1 error) {
	fake.CloseStub = nil
	if fake.closeReturnsOnCall == nil {
		fake.closeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.closeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakePin) EndWatch() error {
	fake.endWatchMutex.Lock()
	ret, specificReturn := fake.endWatchReturnsOnCall[len(fake.endWatchArgsForCall)]
	fake.endWatchArgsForCall = append(fake.endWatchArgsForCall, struct {
	}{})
	fake.recordInvocation("EndWatch", []interface{}{})
	fake.endWatchMutex.Unlock()
	if fake.EndWatchStub != nil {
		return fake.EndWatchStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.endWatchReturns
	return fakeReturns.result1
}

func (fake *FakePin) EndWatchCallCount() int {
	fake.endWatchMutex.RLock()
	defer fake.endWatchMutex.RUnlock()
	return len(fake.endWatchArgsForCall)
}

func (fake *FakePin) EndWatchReturns(result1 error) {
	fake.EndWatchStub = nil
	fake.endWatchReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePin) EndWatchReturnsOnCall(i int, result1 error) {
	fake.EndWatchStub = nil
	if fake.endWatchReturnsOnCall == nil {
		fake.endWatchReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.endWatchReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakePin) Get() (bool, error) {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
	}{})
	fake.recordInvocation("Get", []interface{}{})
	fake.getMutex.Unlock()
	if fake.GetStub != nil {
		return fake.GetStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePin) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *FakePin) GetReturns(result1 bool, result2 error) {
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakePin) GetReturnsOnCall(i int, result1 bool, result2 error) {
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakePin) Mode() (gpio.Mode, error) {
	fake.modeMutex.Lock()
	ret, specificReturn := fake.modeReturnsOnCall[len(fake.modeArgsForCall)]
	fake.modeArgsForCall = append(fake.modeArgsForCall, struct {
	}{})
	fake.recordInvocation("Mode", []interface{}{})
	fake.modeMutex.Unlock()
	if fake.ModeStub != nil {
		return fake.ModeStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modeReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePin) ModeCallCount() int {
	fake.modeMutex.RLock()
	defer fake.modeMutex.RUnlock()
	return len(fake.modeArgsForCall)
}

func (fake *FakePin) ModeReturns(result1 gpio.Mode, result2 error) {
	fake.ModeStub = nil
	fake.modeReturns = struct {
		result1 gpio.Mode
		result2 error
	}{result1, result2}
}

func (fake *FakePin) ModeReturnsOnCall(i int, result1 gpio.Mode, result2 error) {
	fake.ModeStub = nil
	if fake.modeReturnsOnCall == nil {
		fake.modeReturnsOnCall = make(map[int]struct {
			result1 gpio.Mode
			result2 error
		})
	}
	fake.modeReturnsOnCall[i] = struct {
		result1 gpio.Mode
		result2 error
	}{result1, result2}
}

func (fake *FakePin) Set() error {
	fake.setMutex.Lock()
	ret, specificReturn := fake.setReturnsOnCall[len(fake.setArgsForCall)]
	fake.setArgsForCall = append(fake.setArgsForCall, struct {
	}{})
	fake.recordInvocation("Set", []interface{}{})
	fake.setMutex.Unlock()
	if fake.SetStub != nil {
		return fake.SetStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.setReturns
	return fakeReturns.result1
}

func (fake *FakePin) SetCallCount() int {
	fake.setMutex.RLock()
	defer fake.setMutex.RUnlock()
	return len(fake.setArgsForCall)
}

func (fake *FakePin) SetReturns(result1 error) {
	fake.SetStub = nil
	fake.setReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePin) SetReturnsOnCall(i int, result1 error) {
	fake.SetStub = nil
	if fake.setReturnsOnCall == nil {
		fake.setReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.setReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakePin) SetMode(arg1 gpio.Mode) error {
	fake.setModeMutex.Lock()
	ret, specificReturn := fake.setModeReturnsOnCall[len(fake.setModeArgsForCall)]
	fake.setModeArgsForCall = append(fake.setModeArgsForCall, struct {
		arg1 gpio.Mode
	}{arg1})
	fake.recordInvocation("SetMode", []interface{}{arg1})
	fake.setModeMutex.Unlock()
	if fake.SetModeStub != nil {
		return fake.SetModeStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.setModeReturns
	return fakeReturns.result1
}

func (fake *FakePin) SetModeCallCount() int {
	fake.setModeMutex.RLock()
	defer fake.setModeMutex.RUnlock()
	return len(fake.setModeArgsForCall)
}

func (fake *FakePin) SetModeArgsForCall(i int) gpio.Mode {
	fake.setModeMutex.RLock()
	defer fake.setModeMutex.RUnlock()
	argsForCall := fake.setModeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakePin) SetModeReturns(result1 error) {
	fake.SetModeStub = nil
	fake.setModeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePin) SetModeReturnsOnCall(i int, result1 error) {
	fake.SetModeStub = nil
	if fake.setModeReturnsOnCall == nil {
		fake.setModeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.setModeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakePin) Wait(arg1 bool) {
	fake.waitMutex.Lock()
	fake.waitArgsForCall = append(fake.waitArgsForCall, struct {
		arg1 bool
	}{arg1})
	fake.recordInvocation("Wait", []interface{}{arg1})
	fake.waitMutex.Unlock()
	if fake.WaitStub != nil {
		fake.WaitStub(arg1)
	}
}

func (fake *FakePin) WaitCallCount() int {
	fake.waitMutex.RLock()
	defer fake.waitMutex.RUnlock()
	return len(fake.waitArgsForCall)
}

func (fake *FakePin) WaitArgsForCall(i int) bool {
	fake.waitMutex.RLock()
	defer fake.waitMutex.RUnlock()
	argsForCall := fake.waitArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakePin) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.beginWatchMutex.RLock()
	defer fake.beginWatchMutex.RUnlock()
	fake.clearMutex.RLock()
	defer fake.clearMutex.RUnlock()
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	fake.endWatchMutex.RLock()
	defer fake.endWatchMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	fake.modeMutex.RLock()
	defer fake.modeMutex.RUnlock()
	fake.setMutex.RLock()
	defer fake.setMutex.RUnlock()
	fake.setModeMutex.RLock()
	defer fake.setModeMutex.RUnlock()
	fake.waitMutex.RLock()
	defer fake.waitMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePin) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ gpio.Pin = new(FakePin)
