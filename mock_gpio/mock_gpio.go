// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/davecheney/gpio/gpio.go

package mock_gpio

import (
	gomock "code.google.com/p/gomock/gomock"
	. "github.com/davecheney/gpio"
)

// Mock of Pin interface
type MockPin struct {
	ctrl     *gomock.Controller
	recorder *_MockPinRecorder
}

// Recorder for MockPin (not exported)
type _MockPinRecorder struct {
	mock *MockPin
}

func NewMockPin(ctrl *gomock.Controller) *MockPin {
	mock := &MockPin{ctrl: ctrl}
	mock.recorder = &_MockPinRecorder{mock}
	return mock
}

func (_m *MockPin) EXPECT() *_MockPinRecorder {
	return _m.recorder
}

func (_m *MockPin) Mode() Mode {
	ret := _m.ctrl.Call(_m, "Mode")
	ret0, _ := ret[0].(Mode)
	return ret0
}

func (_mr *_MockPinRecorder) Mode() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Mode")
}

func (_m *MockPin) SetMode(_param0 Mode) {
	_m.ctrl.Call(_m, "SetMode", _param0)
}

func (_mr *_MockPinRecorder) SetMode(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetMode", arg0)
}

func (_m *MockPin) Set() {
	_m.ctrl.Call(_m, "Set")
}

func (_mr *_MockPinRecorder) Set() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Set")
}

func (_m *MockPin) Clear() {
	_m.ctrl.Call(_m, "Clear")
}

func (_mr *_MockPinRecorder) Clear() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Clear")
}

func (_m *MockPin) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockPinRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

func (_m *MockPin) Get() bool {
	ret := _m.ctrl.Call(_m, "Get")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockPinRecorder) Get() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get")
}

func (_m *MockPin) BeginWatch(_param0 Edge, _param1 IRQEvent) error {
	ret := _m.ctrl.Call(_m, "BeginWatch", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockPinRecorder) BeginWatch(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BeginWatch", arg0, arg1)
}

func (_m *MockPin) EndWatch() error {
	ret := _m.ctrl.Call(_m, "EndWatch")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockPinRecorder) EndWatch() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "EndWatch")
}

func (_m *MockPin) Wait(_param0 bool) {
	_m.ctrl.Call(_m, "Wait", _param0)
}

func (_mr *_MockPinRecorder) Wait(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Wait", arg0)
}

func (_m *MockPin) Err() error {
	ret := _m.ctrl.Call(_m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockPinRecorder) Err() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Err")
}
