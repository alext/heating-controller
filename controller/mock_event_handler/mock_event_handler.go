// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/alext/heating-controller/controller (interfaces: EventHandler)

package mock_event_handler

import (
	controller "github.com/alext/heating-controller/controller"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockEventHandler is a mock of EventHandler interface
type MockEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockEventHandlerMockRecorder
}

// MockEventHandlerMockRecorder is the mock recorder for MockEventHandler
type MockEventHandlerMockRecorder struct {
	mock *MockEventHandler
}

// NewMockEventHandler creates a new mock instance
func NewMockEventHandler(ctrl *gomock.Controller) *MockEventHandler {
	mock := &MockEventHandler{ctrl: ctrl}
	mock.recorder = &MockEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockEventHandler) EXPECT() *MockEventHandlerMockRecorder {
	return _m.recorder
}

// AddEvent mocks base method
func (_m *MockEventHandler) AddEvent(_param0 controller.Event) error {
	ret := _m.ctrl.Call(_m, "AddEvent", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEvent indicates an expected call of AddEvent
func (_mr *MockEventHandlerMockRecorder) AddEvent(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "AddEvent", reflect.TypeOf((*MockEventHandler)(nil).AddEvent), arg0)
}

// Boost mocks base method
func (_m *MockEventHandler) Boost(_param0 time.Duration) {
	_m.ctrl.Call(_m, "Boost", _param0)
}

// Boost indicates an expected call of Boost
func (_mr *MockEventHandlerMockRecorder) Boost(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Boost", reflect.TypeOf((*MockEventHandler)(nil).Boost), arg0)
}

// Boosted mocks base method
func (_m *MockEventHandler) Boosted() bool {
	ret := _m.ctrl.Call(_m, "Boosted")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Boosted indicates an expected call of Boosted
func (_mr *MockEventHandlerMockRecorder) Boosted() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Boosted", reflect.TypeOf((*MockEventHandler)(nil).Boosted))
}

// CancelBoost mocks base method
func (_m *MockEventHandler) CancelBoost() {
	_m.ctrl.Call(_m, "CancelBoost")
}

// CancelBoost indicates an expected call of CancelBoost
func (_mr *MockEventHandlerMockRecorder) CancelBoost() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "CancelBoost", reflect.TypeOf((*MockEventHandler)(nil).CancelBoost))
}

// NextEvent mocks base method
func (_m *MockEventHandler) NextEvent() *controller.Event {
	ret := _m.ctrl.Call(_m, "NextEvent")
	ret0, _ := ret[0].(*controller.Event)
	return ret0
}

// NextEvent indicates an expected call of NextEvent
func (_mr *MockEventHandlerMockRecorder) NextEvent() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "NextEvent", reflect.TypeOf((*MockEventHandler)(nil).NextEvent))
}

// ReadEvents mocks base method
func (_m *MockEventHandler) ReadEvents() []controller.Event {
	ret := _m.ctrl.Call(_m, "ReadEvents")
	ret0, _ := ret[0].([]controller.Event)
	return ret0
}

// ReadEvents indicates an expected call of ReadEvents
func (_mr *MockEventHandlerMockRecorder) ReadEvents() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ReadEvents", reflect.TypeOf((*MockEventHandler)(nil).ReadEvents))
}

// RemoveEvent mocks base method
func (_m *MockEventHandler) RemoveEvent(_param0 controller.Event) {
	_m.ctrl.Call(_m, "RemoveEvent", _param0)
}

// RemoveEvent indicates an expected call of RemoveEvent
func (_mr *MockEventHandlerMockRecorder) RemoveEvent(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "RemoveEvent", reflect.TypeOf((*MockEventHandler)(nil).RemoveEvent), arg0)
}
