// Code generated by counterfeiter. DO NOT EDIT.
package schedulerfakes

import (
	sync "sync"

	scheduler "github.com/alext/heating-controller/scheduler"
)

type FakeScheduler struct {
	AddJobStub        func(scheduler.Job) error
	addJobMutex       sync.RWMutex
	addJobArgsForCall []struct {
		arg1 scheduler.Job
	}
	addJobReturns struct {
		result1 error
	}
	addJobReturnsOnCall map[int]struct {
		result1 error
	}
	CancelOverrideStub        func()
	cancelOverrideMutex       sync.RWMutex
	cancelOverrideArgsForCall []struct {
	}
	NextJobStub        func() *scheduler.Job
	nextJobMutex       sync.RWMutex
	nextJobArgsForCall []struct {
	}
	nextJobReturns struct {
		result1 *scheduler.Job
	}
	nextJobReturnsOnCall map[int]struct {
		result1 *scheduler.Job
	}
	OverrideStub        func(scheduler.Job)
	overrideMutex       sync.RWMutex
	overrideArgsForCall []struct {
		arg1 scheduler.Job
	}
	ReadJobsStub        func() []scheduler.Job
	readJobsMutex       sync.RWMutex
	readJobsArgsForCall []struct {
	}
	readJobsReturns struct {
		result1 []scheduler.Job
	}
	readJobsReturnsOnCall map[int]struct {
		result1 []scheduler.Job
	}
	RemoveJobStub        func(scheduler.Job)
	removeJobMutex       sync.RWMutex
	removeJobArgsForCall []struct {
		arg1 scheduler.Job
	}
	RunningStub        func() bool
	runningMutex       sync.RWMutex
	runningArgsForCall []struct {
	}
	runningReturns struct {
		result1 bool
	}
	runningReturnsOnCall map[int]struct {
		result1 bool
	}
	StartStub        func()
	startMutex       sync.RWMutex
	startArgsForCall []struct {
	}
	StopStub        func()
	stopMutex       sync.RWMutex
	stopArgsForCall []struct {
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeScheduler) AddJob(arg1 scheduler.Job) error {
	fake.addJobMutex.Lock()
	ret, specificReturn := fake.addJobReturnsOnCall[len(fake.addJobArgsForCall)]
	fake.addJobArgsForCall = append(fake.addJobArgsForCall, struct {
		arg1 scheduler.Job
	}{arg1})
	fake.recordInvocation("AddJob", []interface{}{arg1})
	fake.addJobMutex.Unlock()
	if fake.AddJobStub != nil {
		return fake.AddJobStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.addJobReturns
	return fakeReturns.result1
}

func (fake *FakeScheduler) AddJobCallCount() int {
	fake.addJobMutex.RLock()
	defer fake.addJobMutex.RUnlock()
	return len(fake.addJobArgsForCall)
}

func (fake *FakeScheduler) AddJobArgsForCall(i int) scheduler.Job {
	fake.addJobMutex.RLock()
	defer fake.addJobMutex.RUnlock()
	argsForCall := fake.addJobArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeScheduler) AddJobReturns(result1 error) {
	fake.AddJobStub = nil
	fake.addJobReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeScheduler) AddJobReturnsOnCall(i int, result1 error) {
	fake.AddJobStub = nil
	if fake.addJobReturnsOnCall == nil {
		fake.addJobReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.addJobReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeScheduler) CancelOverride() {
	fake.cancelOverrideMutex.Lock()
	fake.cancelOverrideArgsForCall = append(fake.cancelOverrideArgsForCall, struct {
	}{})
	fake.recordInvocation("CancelOverride", []interface{}{})
	fake.cancelOverrideMutex.Unlock()
	if fake.CancelOverrideStub != nil {
		fake.CancelOverrideStub()
	}
}

func (fake *FakeScheduler) CancelOverrideCallCount() int {
	fake.cancelOverrideMutex.RLock()
	defer fake.cancelOverrideMutex.RUnlock()
	return len(fake.cancelOverrideArgsForCall)
}

func (fake *FakeScheduler) NextJob() *scheduler.Job {
	fake.nextJobMutex.Lock()
	ret, specificReturn := fake.nextJobReturnsOnCall[len(fake.nextJobArgsForCall)]
	fake.nextJobArgsForCall = append(fake.nextJobArgsForCall, struct {
	}{})
	fake.recordInvocation("NextJob", []interface{}{})
	fake.nextJobMutex.Unlock()
	if fake.NextJobStub != nil {
		return fake.NextJobStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.nextJobReturns
	return fakeReturns.result1
}

func (fake *FakeScheduler) NextJobCallCount() int {
	fake.nextJobMutex.RLock()
	defer fake.nextJobMutex.RUnlock()
	return len(fake.nextJobArgsForCall)
}

func (fake *FakeScheduler) NextJobReturns(result1 *scheduler.Job) {
	fake.NextJobStub = nil
	fake.nextJobReturns = struct {
		result1 *scheduler.Job
	}{result1}
}

func (fake *FakeScheduler) NextJobReturnsOnCall(i int, result1 *scheduler.Job) {
	fake.NextJobStub = nil
	if fake.nextJobReturnsOnCall == nil {
		fake.nextJobReturnsOnCall = make(map[int]struct {
			result1 *scheduler.Job
		})
	}
	fake.nextJobReturnsOnCall[i] = struct {
		result1 *scheduler.Job
	}{result1}
}

func (fake *FakeScheduler) Override(arg1 scheduler.Job) {
	fake.overrideMutex.Lock()
	fake.overrideArgsForCall = append(fake.overrideArgsForCall, struct {
		arg1 scheduler.Job
	}{arg1})
	fake.recordInvocation("Override", []interface{}{arg1})
	fake.overrideMutex.Unlock()
	if fake.OverrideStub != nil {
		fake.OverrideStub(arg1)
	}
}

func (fake *FakeScheduler) OverrideCallCount() int {
	fake.overrideMutex.RLock()
	defer fake.overrideMutex.RUnlock()
	return len(fake.overrideArgsForCall)
}

func (fake *FakeScheduler) OverrideArgsForCall(i int) scheduler.Job {
	fake.overrideMutex.RLock()
	defer fake.overrideMutex.RUnlock()
	argsForCall := fake.overrideArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeScheduler) ReadJobs() []scheduler.Job {
	fake.readJobsMutex.Lock()
	ret, specificReturn := fake.readJobsReturnsOnCall[len(fake.readJobsArgsForCall)]
	fake.readJobsArgsForCall = append(fake.readJobsArgsForCall, struct {
	}{})
	fake.recordInvocation("ReadJobs", []interface{}{})
	fake.readJobsMutex.Unlock()
	if fake.ReadJobsStub != nil {
		return fake.ReadJobsStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.readJobsReturns
	return fakeReturns.result1
}

func (fake *FakeScheduler) ReadJobsCallCount() int {
	fake.readJobsMutex.RLock()
	defer fake.readJobsMutex.RUnlock()
	return len(fake.readJobsArgsForCall)
}

func (fake *FakeScheduler) ReadJobsReturns(result1 []scheduler.Job) {
	fake.ReadJobsStub = nil
	fake.readJobsReturns = struct {
		result1 []scheduler.Job
	}{result1}
}

func (fake *FakeScheduler) ReadJobsReturnsOnCall(i int, result1 []scheduler.Job) {
	fake.ReadJobsStub = nil
	if fake.readJobsReturnsOnCall == nil {
		fake.readJobsReturnsOnCall = make(map[int]struct {
			result1 []scheduler.Job
		})
	}
	fake.readJobsReturnsOnCall[i] = struct {
		result1 []scheduler.Job
	}{result1}
}

func (fake *FakeScheduler) RemoveJob(arg1 scheduler.Job) {
	fake.removeJobMutex.Lock()
	fake.removeJobArgsForCall = append(fake.removeJobArgsForCall, struct {
		arg1 scheduler.Job
	}{arg1})
	fake.recordInvocation("RemoveJob", []interface{}{arg1})
	fake.removeJobMutex.Unlock()
	if fake.RemoveJobStub != nil {
		fake.RemoveJobStub(arg1)
	}
}

func (fake *FakeScheduler) RemoveJobCallCount() int {
	fake.removeJobMutex.RLock()
	defer fake.removeJobMutex.RUnlock()
	return len(fake.removeJobArgsForCall)
}

func (fake *FakeScheduler) RemoveJobArgsForCall(i int) scheduler.Job {
	fake.removeJobMutex.RLock()
	defer fake.removeJobMutex.RUnlock()
	argsForCall := fake.removeJobArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeScheduler) Running() bool {
	fake.runningMutex.Lock()
	ret, specificReturn := fake.runningReturnsOnCall[len(fake.runningArgsForCall)]
	fake.runningArgsForCall = append(fake.runningArgsForCall, struct {
	}{})
	fake.recordInvocation("Running", []interface{}{})
	fake.runningMutex.Unlock()
	if fake.RunningStub != nil {
		return fake.RunningStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.runningReturns
	return fakeReturns.result1
}

func (fake *FakeScheduler) RunningCallCount() int {
	fake.runningMutex.RLock()
	defer fake.runningMutex.RUnlock()
	return len(fake.runningArgsForCall)
}

func (fake *FakeScheduler) RunningReturns(result1 bool) {
	fake.RunningStub = nil
	fake.runningReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeScheduler) RunningReturnsOnCall(i int, result1 bool) {
	fake.RunningStub = nil
	if fake.runningReturnsOnCall == nil {
		fake.runningReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.runningReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeScheduler) Start() {
	fake.startMutex.Lock()
	fake.startArgsForCall = append(fake.startArgsForCall, struct {
	}{})
	fake.recordInvocation("Start", []interface{}{})
	fake.startMutex.Unlock()
	if fake.StartStub != nil {
		fake.StartStub()
	}
}

func (fake *FakeScheduler) StartCallCount() int {
	fake.startMutex.RLock()
	defer fake.startMutex.RUnlock()
	return len(fake.startArgsForCall)
}

func (fake *FakeScheduler) Stop() {
	fake.stopMutex.Lock()
	fake.stopArgsForCall = append(fake.stopArgsForCall, struct {
	}{})
	fake.recordInvocation("Stop", []interface{}{})
	fake.stopMutex.Unlock()
	if fake.StopStub != nil {
		fake.StopStub()
	}
}

func (fake *FakeScheduler) StopCallCount() int {
	fake.stopMutex.RLock()
	defer fake.stopMutex.RUnlock()
	return len(fake.stopArgsForCall)
}

func (fake *FakeScheduler) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addJobMutex.RLock()
	defer fake.addJobMutex.RUnlock()
	fake.cancelOverrideMutex.RLock()
	defer fake.cancelOverrideMutex.RUnlock()
	fake.nextJobMutex.RLock()
	defer fake.nextJobMutex.RUnlock()
	fake.overrideMutex.RLock()
	defer fake.overrideMutex.RUnlock()
	fake.readJobsMutex.RLock()
	defer fake.readJobsMutex.RUnlock()
	fake.removeJobMutex.RLock()
	defer fake.removeJobMutex.RUnlock()
	fake.runningMutex.RLock()
	defer fake.runningMutex.RUnlock()
	fake.startMutex.RLock()
	defer fake.startMutex.RUnlock()
	fake.stopMutex.RLock()
	defer fake.stopMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeScheduler) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ scheduler.Scheduler = new(FakeScheduler)
